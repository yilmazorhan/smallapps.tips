/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package tips.smallapps.web.generated.productgroup.api;

import tips.smallapps.web.generated.productgroup.model.FindProductGroupQuery;
import tips.smallapps.web.generated.productgroup.model.FindProductGroupQueryOperationResponse;
import tips.smallapps.web.generated.productgroup.model.NewProductGroup;
import tips.smallapps.web.generated.productgroup.model.OperationResponse;
import tips.smallapps.web.generated.productgroup.model.ProductGroup;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-01-17T12:36:37.707123+03:00[Europe/Istanbul]")
@Validated
@Api(value = "product-group", description = "the product-group API")
public interface ProductGroupApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /product-group : create new product group with given name
     *
     * @param newProductGroup NewProductGroup object that needs to be added to the store (required)
     * @return Invalid ProductGroup definition. Business validations are failed. (status code 400)
     *         or successful operation (status code 200)
     *         or internal error (status code 500)
     */
    @ApiOperation(value = "create new product group with given name", nickname = "createNewProductGroup", notes = "", response = OperationResponse.class, tags={ "product-group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ProductGroup definition. Business validations are failed.", response = OperationResponse.class),
        @ApiResponse(code = 200, message = "successful operation", response = OperationResponse.class),
        @ApiResponse(code = 500, message = "internal error", response = OperationResponse.class) })
    @PostMapping(
        value = "/product-group",
        produces = { "application/xml", "application/json" },
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<OperationResponse> createNewProductGroup(@ApiParam(value = "NewProductGroup object that needs to be added to the store" ,required=true )  @Valid @RequestBody NewProductGroup newProductGroup) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <code>aeiou</code> <message>aeiou</message> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /product-group/find-by-name : find product group by name
     *
     * @param findProductGroupQuery FindProductGroupQuery object that needs to be queried (required)
     * @return Invalid FindProductGroupQuery definition. Business validations are failed. (status code 400)
     *         or ProductGroup not found. (status code 404)
     *         or successful operation (status code 200)
     *         or internal error (status code 500)
     */
    @ApiOperation(value = "find product group by name", nickname = "findProductGroupByName", notes = "", response = FindProductGroupQueryOperationResponse.class, tags={ "product-group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid FindProductGroupQuery definition. Business validations are failed.", response = OperationResponse.class),
        @ApiResponse(code = 404, message = "ProductGroup not found.", response = OperationResponse.class),
        @ApiResponse(code = 200, message = "successful operation", response = FindProductGroupQueryOperationResponse.class),
        @ApiResponse(code = 500, message = "internal error", response = OperationResponse.class) })
    @PostMapping(
        value = "/product-group/find-by-name",
        produces = { "application/xml", "application/json" },
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<FindProductGroupQueryOperationResponse> findProductGroupByName(@ApiParam(value = "FindProductGroupQuery object that needs to be queried" ,required=true )  @Valid @RequestBody FindProductGroupQuery findProductGroupQuery) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /product-group : update product group with given name
     *
     * @param productGroup ProductGroup object that needs to be added to the store (required)
     * @return Invalid ProductGroup definition. Business validations are failed. (status code 400)
     *         or product group not found. (status code 404)
     *         or successful operation (status code 200)
     *         or internal error (status code 500)
     */
    @ApiOperation(value = "update product group with given name", nickname = "updateProductGroup", notes = "", response = OperationResponse.class, tags={ "product-group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ProductGroup definition. Business validations are failed.", response = OperationResponse.class),
        @ApiResponse(code = 404, message = "product group not found.", response = OperationResponse.class),
        @ApiResponse(code = 200, message = "successful operation", response = OperationResponse.class),
        @ApiResponse(code = 500, message = "internal error", response = OperationResponse.class) })
    @PutMapping(
        value = "/product-group",
        produces = { "application/xml", "application/json" },
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<OperationResponse> updateProductGroup(@ApiParam(value = "ProductGroup object that needs to be added to the store" ,required=true )  @Valid @RequestBody ProductGroup productGroup) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <code>aeiou</code> <message>aeiou</message> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
